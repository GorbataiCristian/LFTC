program ::= {decllist | cmpdstmt}
decllist ::= declaration | declaration decllist
declaration ::= IDENTIFIER type
type1 ::= "boolean" | "string" | "int" | "double" | "float"
arraydecl ::= type1 "[" number "]" IDENTIFIER 
type ::= type1 | arraydecl
# cmpdstmt ::= "{" stmtlist "}" # how to do in python-like language with indents?
stmtlist ::= stmt | (stmt "\n" stmtlist)
stmt ::= simplstmt | structstmt
simplstmt ::= assignstmt | iostmt
assignstmt ::= IDENTIFIER "=" expression
expression ::= (expression ("+" | "-") term) | term
term ::= (term ("*" | "/") factor) | factor
factor ::= "(" expression ")" | IDENTIFIER
iostmt ::= ("read" | "write") "(" IDENTIFIER ")"
structstmt ::= cmpdstmt | ifstmt | whilestmt | forstmt
ifstmt ::= "check" condition ":" stmt {"else check" condition ":" stmt}  ["else" stmt]
forstmt ::= "loop" VAR "in" ARRAY
whilestmt ::= "while" condition ":" stmt
condition ::= expression RELATION expression
RELATION ::= "<" | "<=" | "=" | "<>" | ">=" | ">"
